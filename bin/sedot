#!/usr/bin/env bash

. `dirname $0`/../lib/init.sh
. $BASE/lib/common.sh

#
# Parse arguments
#

while [ $# != 0 ]; do
	case "$1" in
		--dry-run)
			DRYRUN=1 ;;
		-s|--source)
			shift
			SOURCE=$1 ;;
		-m|--method)
			shift
			METHOD=$1 ;;
		*)
			PKG=$1 ;;
	esac
	shift
done

if [ "$PKG" == "" ]; then
	echo_error "Usage: $0 [OPTION]... PACKAGE"
	echo_error ""
	echo_error "  --source SOURCE, -s        override source location"
	echo_error "  --method METHOD, -m        override synchronization method"
	echo_error "  --dry-run                  tell sync method to do simulation only (dry-run)"
	exit 1
fi

#
# Initialization
#

TS=`date +%Y%m%d.%H%M%S`
LOGBASE=$BASE/log/sync/$PKG
LOGDIR=$LOGBASE/$TS
PKGDIR=$BASE/pkgs/$PKG

PID=$$
PIDFILE=$BASE/var/run/sedot-$PKG.pid

[ -z "$DRYRUN" ] && DRYRUN=0

mkdir -p $LOGDIR
LOG=$LOGDIR/sync.log
STATUS=$LOGDIR/status.txt

NAME=`get_value $PKGDIR/name`

if [ ! -d $PKGDIR ]; then
	echo_error "Unknown package: $PKG"
	exit 2
fi

[ -z "$SOURCE" ] && SOURCE=`get_value "$PKGDIR/source"`
[ -z "$TARGET" ] && TARGET=`get_value "$PKGDIR/target"`
[ -z "$METHOD" ] && METHOD=`get_value "$PKGDIR/method"`

TARGET=$TARGET/

LOCKFILE=$TARGET/.SYNC-in-Progress-$HOST

#
# Functions
#

write_status () {
	code=$1
	msg=$2

	exec 3>&1
	exec 1>$STATUS

	echo "pkg $PKG"
	echo "name $NAME"
	echo "status $code"
	echo "msg $msg"
	echo "time `date -R`"
	echo "dryrun $DRYRUN"
	echo "method $METHOD"

	if [ ! -z "$SOURCE" ]; then
		echo "source $SOURCE"
	fi

	if [ ! -z "$TARGET" ]; then
		echo "target $TARGET"
	fi

	exec 1>&3
}

sedot_exit () {
	code=$1

	echo "===== STATUS ====="
	echo "Log directory: $LOGDIR"
	cat $STATUS

	exit $code
}

cleanup () {
	do_unlock $LOCKFILE
	rm $PIDFILE
}

#
# Preliminary checking
#

# Is sync method supported?

SYNC=$BASE/bin/get.$METHOD

if [ ! -f $SYNC ]; then
	write_status "502" "Unsupported synchronization method: $METHOD"
	sedot_exit 502
fi

# Are source and target specified?

if [ -z "$SOURCE" -o -z "$TARGET" ]; then
	write_status "503" "Package source and/or target informations are not found."
	sedot_exit 503
fi

# Does target directory exist?

if [ ! -d "$TARGET" ]; then
	write_status  "504" "Target directory doesn't exist: $TARGET"
	sedot_exit 504
fi

#
# Synchronize!
#

STEPFILE=$LOGDIR/step

echo $PID > $PIDFILE

echo 0 > $STEPFILE

trap 'cleanup' 1 2 3 6

do_lock $LOCKFILE
if [ "$?" -ne "0" ]; then
	write_status "301" "Unable to gain lock"
	sedot_exit 301
fi

rm -f $LOGBASE/current
ln -s $TS $LOGBASE/current

echo "Synchronization begin at `date -R`..."
echo "- Source: $SOURCE"
echo "- Target: $TARGET"
echo "- Method: $METHOD"

TIME_START=`date -R`
write_status "100" "In progress"

(
set +e

export BASE
export SOURCE
export TARGET
export STEPFILE
export LOGDIR
export PKGDIR
export DRYRUN

$SYNC

echo $? > $LOGDIR/return.txt
) 2>&1 | tee -a $LOG

RET=`cat $LOGDIR/return.txt`
TIME_FINISH=`date -R`

cleanup

#
# Write status
#

if [ "$RET" -ne "0" ]; then
	write_status "302" "Error"
else
	write_status "200" "Done"
fi

exec 3>&1
exec 1>>$STATUS

echo "code $RET"
echo "step `cat $STEPFILE`"
echo "start $TIME_START"
echo "finish $TIME_FINISH"

exec 1>&3

#
# Close log
#

echo >> $LOG
echo "## Sedot: Status" >> $LOG

cat $STATUS >> $LOG

if [ "$RET" -ne "0" ]; then
	tail -n 50 $LOG > $LOG.last.txt
fi

gzip -9 $LOG

#
# Call plugins
#

if [ -f $BASE/etc/post-sync-plugins ]; then
	PLUGINDIR=$BASE/plugins

	get_content $BASE/etc/post-sync-plugins | while read plugin
	do

		PLUGIN=$PLUGINDIR/$plugin/$plugin

		if [ -x $PLUGIN ]; then

			(
			set -e

			exec 1>/dev/null
			exec 2>/dev/null
			
			export SEDOT_RETURN=$RET
			export SEDOT_TIME_START=$TIME_START
			export SEDOT_TIME_FINISH=$TIME_FINISH
			export SEDOT_PACKAGE=$PKG
			export SEDOT_NAME=$NAME
			export SEDOT_TIMESTAMP=$TS
			export SEDOT_LOG=$LOG
			export SEDOT_STATUS=$STATUS
			export SEDOT_METHOD=$METHOD
			export SEDOT_BASE=$BASE
			export SEDOT_HOSTNAME=$HOSTNAME
			export SEDOT_SOURCE=$SOURCE
			export SEDOT_TARGET=$TARGET
			export SEDOT_PLUGINDIR=$PLUGINDIR/$plugin

			$PLUGIN
			)

		fi

	done
fi


sedot_exit 0
